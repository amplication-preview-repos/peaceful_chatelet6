/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PlacementService } from "../placement.service";
import { PlacementCreateInput } from "./PlacementCreateInput";
import { Placement } from "./Placement";
import { PlacementFindManyArgs } from "./PlacementFindManyArgs";
import { PlacementWhereUniqueInput } from "./PlacementWhereUniqueInput";
import { PlacementUpdateInput } from "./PlacementUpdateInput";

export class PlacementControllerBase {
  constructor(protected readonly service: PlacementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Placement })
  async createPlacement(
    @common.Body() data: PlacementCreateInput
  ): Promise<Placement> {
    return await this.service.createPlacement({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Placement] })
  @ApiNestedQuery(PlacementFindManyArgs)
  async placements(@common.Req() request: Request): Promise<Placement[]> {
    const args = plainToClass(PlacementFindManyArgs, request.query);
    return this.service.placements({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Placement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async placement(
    @common.Param() params: PlacementWhereUniqueInput
  ): Promise<Placement | null> {
    const result = await this.service.placement({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Placement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePlacement(
    @common.Param() params: PlacementWhereUniqueInput,
    @common.Body() data: PlacementUpdateInput
  ): Promise<Placement | null> {
    try {
      return await this.service.updatePlacement({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Placement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePlacement(
    @common.Param() params: PlacementWhereUniqueInput
  ): Promise<Placement | null> {
    try {
      return await this.service.deletePlacement({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
