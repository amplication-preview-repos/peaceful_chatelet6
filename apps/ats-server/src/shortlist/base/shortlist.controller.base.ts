/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShortlistService } from "../shortlist.service";
import { ShortlistCreateInput } from "./ShortlistCreateInput";
import { Shortlist } from "./Shortlist";
import { ShortlistFindManyArgs } from "./ShortlistFindManyArgs";
import { ShortlistWhereUniqueInput } from "./ShortlistWhereUniqueInput";
import { ShortlistUpdateInput } from "./ShortlistUpdateInput";

export class ShortlistControllerBase {
  constructor(protected readonly service: ShortlistService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shortlist })
  async createShortlist(
    @common.Body() data: ShortlistCreateInput
  ): Promise<Shortlist> {
    return await this.service.createShortlist({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Shortlist] })
  @ApiNestedQuery(ShortlistFindManyArgs)
  async shortlists(@common.Req() request: Request): Promise<Shortlist[]> {
    const args = plainToClass(ShortlistFindManyArgs, request.query);
    return this.service.shortlists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shortlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shortlist(
    @common.Param() params: ShortlistWhereUniqueInput
  ): Promise<Shortlist | null> {
    const result = await this.service.shortlist({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shortlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShortlist(
    @common.Param() params: ShortlistWhereUniqueInput,
    @common.Body() data: ShortlistUpdateInput
  ): Promise<Shortlist | null> {
    try {
      return await this.service.updateShortlist({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shortlist })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShortlist(
    @common.Param() params: ShortlistWhereUniqueInput
  ): Promise<Shortlist | null> {
    try {
      return await this.service.deleteShortlist({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
